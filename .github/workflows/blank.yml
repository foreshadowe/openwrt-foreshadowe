# This is a basic workflow to help you get started with Actions

name: Build bcm2711 openwrt

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  schedule:
    - cron: 0 18 * * *
env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  CONFIG_FILE: configs/rpi4.config
  FEED_FILE: configs/feeds.conf.default
  EXTRA_CONFIG: configs/extra.config
  DIY_SCRIPT: diy-script.sh
  CLASH_KERNEL: arm64
  CACHE_TOOLCHAIN: true
  UPLOAD_BIN_DIR: false
  FIRMWARE_RELEASE: true
  FIRMWARE_RELEASE_UPLOAD: true
  FIRMWARE_TAG: RaspberryPi4
  TZ: Asia/Shanghai
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-20.04
    
    outputs:
      OPENWRT_ROOT_PATH: ${{ steps.clone.outputs.OPENWRT_ROOT_PATH }}
      CURRENT_BRANCH: ${{ steps.env.outputs.CURRENT_BRANCH }}
      SOURCE_OWNER: ${{ steps.env.outputs.SOURCE_OWNER }}
      SOURCE_REPO: ${{ steps.env.outputs.SOURCE_REPO }}
      DEVICE_PLATFORM: ${{ steps.env.outputs.DEVICE_PLATFORM }}
      DEVICE_TARGET: ${{ steps.env.outputs.DEVICE_TARGET }}
      DEVICE_SUBTARGET: ${{ steps.env.outputs.DEVICE_SUBTARGET }}
      TOOLCHAIN_IMAGE: ${{ steps.env.outputs.TOOLCHAIN_IMAGE }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Initialization Environment
        run: |
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install squashfs-tools $(curl -fsSL git.io/depends-ubuntu-2004)
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
      - name: Checkout
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
        uses: actions/checkout@v4

      - name: Clone Source Code
        run: |
          echo "Clone lede project"
          git clone https://github.com/coolsnowwolf/lede
          echo "Copy .config && feeds.conf.default"
          rm -f ./lede/feeds.conf.default
          cp $FEED_FILE ./lede/feeds.conf.default
          
      - name: Compile
        run: |
          cd lede
          echo "./scripts/feeds clean"
          ./scripts/feeds clean
          echo "./scripts/feeds update -a"
          ./scripts/feeds update -a
          echo "./scripts/feeds install -a"
          ./scripts/feeds install -a
          echo "Test sed IP command"
          echo "New"
          sed -i 's/192.168.1.1/10.0.0.2/g' package/base-files/luci2/bin/config_generate
          echo "Old"
          sed -i 's/192.168.1.1/10.0.0.2/g' package/base-files/files/bin/config_generate
          echo "Test sed theme"
          echo "Old"
          sed -i "s/luci-theme-bootstrap/luci-theme-design/g" feeds/luci/collections/luci/Makefile
          rm -f ./.config
          cd ..
          cp $CONFIG_FILE ./lede/.config
          cd lede
          echo "make defconfig"
          make defconfig
          echo "make download -j8"
          make download -j8
          echo "find dl -size -1024c -exec ls -l {} \;"
          find dl -size -1024c -exec ls -l {} \;
          echo "find dl -size -1024c -exec rm -f {} \;"
          find dl -size -1024c -exec rm -f {} \;
          echo -e "$(nproc) thread compile"
          make -j$(nproc) || make -j1 || make -j1 V=s
          echo "status=success" >> $GITHUB_OUTPUT
          echo "DATE=$(date +"%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV
          echo "FILE_DATE=$(date +"%Y.%m.%d")" >> $GITHUB_ENV
          echo $PWD
          rm -rf ./bin/packages
          rm -rf ./build_dir
          
      - name: Deploy Files To Release
        uses: ncipollo/release-action@v1.8.0
        if: env.FIRMWARE_RELEASE_UPLOAD == 'true'
        with:
          name: openwrt-bcm2711-raspberry-pi-4b
          allowUpdates: true
          replacesArtifacts: true
          tag: ${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}
          body: ${{ env.BUILD_DATE }}
          commit: ${{ env.CURRENT_BRANCH }}
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: ${{ env.OPENWRT_ROOT_PATH }}/bin/targets/${{ env.DEVICE_TARGET }}/${{ env.DEVICE_SUBTARGET }}/*

